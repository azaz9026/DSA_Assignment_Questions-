Q .1 =====================================================================================================

def makeGreat(s: str) -> str:
    stack = []

    for char in s:
        if stack and abs(ord(char) - ord(stack[-1])) == 32:
            # If the current character is the opposite case of the top character
            # in the stack, remove both characters from the stack
            stack.pop()
        else:
            # Otherwise, push the current character onto the stack
            stack.append(char)

    return "".join(stack)

Q .2 =====================================================================================================

def removeDuplicates(s: str) -> str:
    stack = []

    for char in s:
        if stack and char == stack[-1]:
            # If the current character matches the top character in the stack,
            # remove both characters from the stack
            stack.pop()
        else:
            # Otherwise, push the current character onto the stack
            stack.append(char)

    return "".join(stack)


Q .3 =====================================================================================================

class StockSpanner:
    def __init__(self):
        self.stack = []  # Stack to store (price, span) tuples

    def next(self, price: int) -> int:
        span = 1  # The default span for the current day is 1

        # Pop elements from the stack with prices less than or equal to the current price
        while self.stack and self.stack[-1][0] <= price:
            prev_price, prev_span = self.stack.pop()
            span += prev_span

        # Push the current price and its span onto the stack
        self.stack.append((price, span))

        return span

# Test case
if __name__ == "__main__":
    stock_spanner = StockSpanner()
    prices = [100, 80, 60, 70, 60, 75, 85]
    for price in prices:
        print(stock_spanner.next(price))


Q .4 =====================================================================================================

from typing import List

def mincostTickets(days: List[int], costs: List[int]) -> int:
    last_day = days[-1]  # Last day from the given days list
    dp = [0] * (last_day + 1)

    for i in range(1, last_day + 1):
        if i not in days:
            dp[i] = dp[i - 1]
        else:
            dp[i] = min(
                dp[max(i - 1, 0)] + costs[0],           # One-day pass
                dp[max(i - 7, 0)] + costs[1],           # Seven-day pass
                dp[max(i - 30, 0)] + costs[2]           # Thirty-day pass
            )

    return dp[last_day]

# Test case
if __name__ == "__main__":
    days = [1, 4, 6, 7, 8, 20]
    costs = [2, 7, 15]
    print(mincostTickets(days, costs))  # Output: 11


Q .5 =====================================================================================================
from typing import List

def mincostTickets(days: List[int], costs: List[int]) -> int:
    last_day = days[-1]  # Last day from the given days list
    dp = [0] * (last_day + 1)

    for i in range(1, last_day + 1):
        if i not in days:
            dp[i] = dp[i - 1]
        else:
            dp[i] = min(
                dp[max(i - 1, 0)] + costs[0],           # One-day pass
                dp[max(i - 7, 0)] + costs[1],           # Seven-day pass
                dp[max(i - 30, 0)] + costs[2]           # Thirty-day pass
            )

    return dp[last_day]

# Test case
if __name__ == "__main__":
    days = [1, 4, 6, 7, 8, 20]
    costs = [2, 7, 15]
    print(mincostTickets(days, costs))  # Output: 11
