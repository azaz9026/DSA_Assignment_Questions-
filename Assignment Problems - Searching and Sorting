// Q.1 ============================================================================================================================

function twoSum(numbers, target) {
  let left = 0;
  let right = numbers.length - 1;

  while (left < right) {
    const currentSum = numbers[left] + numbers[right];

    if (currentSum === target) {
      return [left + 1, right + 1]; // Adding one to the indices to match the 1-indexing requirement
    } else if (currentSum < target) {
      left++;
    } else {
      right--;
    }
  }

  return null; // If no solution is found, return null or any other indicator of your choice
}

// Test case
const numbers = [2, 7, 11, 15];
const target = 9;
console.log(twoSum(numbers, target)); // Output: [1, 2]


// Q.2 ============================================================================================================================

function searchRange(nums, target) {
  const findFirstPosition = (nums, target) => {
    let left = 0;
    let right = nums.length - 1;
    let result = -1;

    while (left <= right) {
      const mid = Math.floor((left + right) / 2);

      if (nums[mid] >= target) {
        right = mid - 1;
        if (nums[mid] === target) result = mid;
      } else {
        left = mid + 1;
      }
    }

    return result;
  };

  const findLastPosition = (nums, target) => {
    let left = 0;
    let right = nums.length - 1;
    let result = -1;

    while (left <= right) {
      const mid = Math.floor((left + right) / 2);

      if (nums[mid] <= target) {
        left = mid + 1;
        if (nums[mid] === target) result = mid;
      } else {
        right = mid - 1;
      }
    }

    return result;
  };

  const firstPosition = findFirstPosition(nums, target);
  const lastPosition = findLastPosition(nums, target);

  return [firstPosition, lastPosition];
}

// Test case
const nums = [5, 7, 7, 8, 8, 10];
const target = 8;
console.log(searchRange(nums, target)); // Output: [3, 4]


// Q.3 ============================================================================================================================



function findPeakElement(nums) {
  const n = nums.length;
  let left = 0;
  let right = n - 1;

  while (left < right) {
    const mid = Math.floor((left + right) / 2);

    if (nums[mid] < nums[mid + 1]) {
      // Move towards the higher neighbor
      left = mid + 1;
    } else {
      // Move towards the lower or equal neighbor
      right = mid;
    }
  }

  return left;
}

// Test case
const nums = [1, 2, 3, 1];
console.log(findPeakElement(nums)); // Output: 2



// Q.4 ============================================================================================================================


function searchInsert(nums, target) {
  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (nums[mid] === target) {
      return mid;
    } else if (nums[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }

  // At this point, left is the correct index to insert the target value
  return left;
}

// Test cases
const nums1 = [1, 3, 5, 6];
const target1 = 5;
console.log(searchInsert(nums1, target1)); // Output: 2

const nums2 = [1, 3, 5, 6];
const target2 = 7;
console.log(searchInsert(nums2, target2)); // Output: 4


// Q.5 ============================================================================================================================


function findMajorityElement(nums) {
  let candidate = null;
  let count = 0;

  for (const num of nums) {
    if (count === 0) {
      // If count becomes 0, update the candidate to the current number
      candidate = num;
      count = 1;
    } else if (num === candidate) {
      // If the current number is the same as the candidate, increment the count
      count++;
    } else {
      // If the current number is different from the candidate, decrement the count
      count--;
    }
  }

  // At this point, the candidate is the potential majority element
  // We need to check if it appears more than n/2 times
  count = 0;
  for (const num of nums) {
    if (num === candidate) {
      count++;
    }
  }

  if (count > nums.length / 2) {
    return candidate;
  } else {
    return null; // If there is no majority element, return null or any other indicator of your choice
  }
}

// Test case
const nums = [3, 3, 4, 2, 4, 4, 2, 4, 4];
console.log(findMajorityElement(nums)); // Output: 4




// Q.6 ============================================================================================================================

function isBadVersion(version) {
  // The actual API implementation that returns true if the version is bad, false otherwise
  // This function is provided in the problem, and you don't need to implement it here
  return version >= bad;
}

function firstBadVersion(n) {
  let left = 1;
  let right = n;

  while (left < right) {
    const mid = Math.floor((left + right) / 2);

    if (isBadVersion(mid)) {
      // If mid version is bad, search for the first bad version in the left half
      right = mid;
    } else {
      // If mid version is not bad, search for the first bad version in the right half
      left = mid + 1;
    }
  }

  // At this point, left and right pointers are at the first bad version
  return left;
}

// Test case
const n = 5;
const bad = 4;
console.log(firstBadVersion(n)); // Output: 4



// Q.7 ============================================================================================================================


function countInversions(arr) {
  let inversions = 0;

  const mergeSort = (arr) => {
    if (arr.length <= 1) {
      return arr;
    }

    const mid = Math.floor(arr.length / 2);
    const left = arr.slice(0, mid);
    const right = arr.slice(mid);

    return merge(mergeSort(left), mergeSort(right));
  };

  const merge = (left, right) => {
    let mergedArr = [];
    let i = 0;
    let j = 0;

    while (i < left.length && j < right.length) {
      if (left[i] <= right[j]) {
        mergedArr.push(left[i]);
        i++;
      } else {
        // If left[i] > right[j], it forms an inversion with all the remaining elements in the left array
        mergedArr.push(right[j]);
        j++;
        inversions += left.length - i;
      }
    }

    mergedArr = mergedArr.concat(left.slice(i));
    mergedArr = mergedArr.concat(right.slice(j));

    return mergedArr;
  };

  mergeSort(arr);
  return inversions;
}

// Test case
const arr = [2, 4, 1, 3, 5];
console.log(countInversions(arr)); // Output: 3


// Q.8 ============================================================================================================================


function findCommonElements(ar1, ar2, ar3) {
  let i = 0;
  let j = 0;
  let k = 0;
  const commonElements = [];

  while (i < ar1.length && j < ar2.length && k < ar3.length) {
    if (ar1[i] === ar2[j] && ar2[j] === ar3[k]) {
      commonElements.push(ar1[i]);
      i++;
      j++;
      k++;
    } else if (ar1[i] < ar2[j]) {
      i++;
    } else if (ar2[j] < ar3[k]) {
      j++;
    } else {
      k++;
    }
  }

  return commonElements;
}

// Test case
const ar1 = [1, 5, 10, 20, 40, 80];
const ar2 = [6, 7, 20, 80, 100];
const ar3 = [3, 4, 15, 20, 30, 70, 80, 120];
console.log(findCommonElements(ar1, ar2, ar3)); // Output: [20, 80]
