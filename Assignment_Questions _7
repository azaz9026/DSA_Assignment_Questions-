// Q.1 ==================================================================================================================================================


function isIsomorphic(s, t) {
  if (s.length !== t.length) {
    return false;
  }

  const sToTMap = new Map();
  const tToSMap = new Map();

  for (let i = 0; i < s.length; i++) {
    const sChar = s[i];
    const tChar = t[i];

    if (sToTMap.has(sChar)) {
      if (sToTMap.get(sChar) !== tChar) {
        return false;
      }
    } else {
      sToTMap.set(sChar, tChar);
    }

    if (tToSMap.has(tChar)) {
      if (tToSMap.get(tChar) !== sChar) {
        return false;
      }
    } else {
      tToSMap.set(tChar, sChar);
    }
  }

  return true;
}
const s = "egg";
const t = "add";
console.log(isIsomorphic(s, t));


// Q.2 ==================================================================================================================================================


function isStrobogrammatic(num) {
  const mappings = {
    '0': '0',
    '1': '1',
    '6': '9',
    '8': '8',
    '9': '6',
  };

  let rotatedNum = '';
  for (let i = num.length - 1; i >= 0; i--) {
    const char = num[i];
    if (mappings.hasOwnProperty(char)) {
      rotatedNum += mappings[char];
    } else {
      return false;
    }
  }

  return rotatedNum === num;
}
const num = "69";
console.log(isStrobogrammatic(num));




// Q.3 ==================================================================================================================================================


function addStrings(num1, num2) {
  let p1 = num1.length - 1;
  let p2 = num2.length - 1;
  let carry = 0;
  let result = '';

  while (p1 >= 0 || p2 >= 0 || carry !== 0) {
    const x = p1 >= 0 ? parseInt(num1[p1]) : 0;
    const y = p2 >= 0 ? parseInt(num2[p2]) : 0;
    const currSum = x + y + carry;

    result = (currSum % 10) + result;
    carry = Math.floor(currSum / 10);

    p1--;
    p2--;
  }

  return result;
}
const num1 = "11";
const num2 = "123";
console.log(addStrings(num1, num2));



// Q.4 ==================================================================================================================================================


function reverseWords(s) {
  const words = s.split(' ');
  const reversedWords = [];

  for (let word of words) {
    const reversedWord = word.split('').reverse().join('');
    reversedWords.push(reversedWord);
  }

  const reversedSentence = reversedWords.join(' ');
  return reversedSentence;
}
const s = "Let's take LeetCode contest";
console.log(reverseWords(s));


// Q.5 ==================================================================================================================================================


function reverseSubstring(s, start, end) {
  while (start < end) {
    const temp = s[start];
    s[start] = s[end];
    s[end] = temp;
    start++;
    end--;
  }
}

function reverseStr(s, k) {
  const arr = s.split('');

  for (let i = 0; i < arr.length; i += 2 * k) {
    const start = i;
    const end = Math.min(i + k - 1, arr.length - 1);
    reverseSubstring(arr, start, end);
  }

  return arr.join('');
}
const s = "abcdefg";
const k = 2;
console.log(reverseStr(s, k));


// Q.6 ==================================================================================================================================================


function canShift(s, goal) {
  if (s.length !== goal.length) {
    return false;
  }

  const s2 = s + s;
  return s2.includes(goal);
}
const s = "abcde";
const goal = "cdeab";
console.log(canShift(s, goal)); // Output: true



// Q.7 ==================================================================================================================================================


function processString(str) {
  const result = [];

  for (const ch of str) {
    if (ch !== '#') {
      result.push(ch);
    } else if (result.length > 0) {
      result.pop();
    }
  }

  return result.join('');
}

function areEqualAfterBackspace(s, t) {
  const processedS = processString(s);
  const processedT = processString(t);

  return processedS === processedT;
}


//Q. 8 ================================================================================================================================

function checkStraightLine(coordinates) {
  if (coordinates.length <= 2) {
    return true;
  }

  const [x1, y1] = coordinates[0];
  const [x2, y2] = coordinates[1];
  const slope = (x2 - x1) / (y2 - y1);

  for (let i = 2; i < coordinates.length; i++) {
    const [x, y] = coordinates[i];
    const currentSlope = (x - x1) / (y - y1);

    if (currentSlope !== slope) {
      return false;
    }
  }

  return true;
}
const coordinates = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]];
console.log(checkStraightLine(coordinates)); // Output: true



