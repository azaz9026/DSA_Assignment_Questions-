// Q. 1 ===================================================================================================================

1 . Static Position:
    The default position for all elements is static, meaning they flow in the normal document layout.
    They are not affected by the top, right, bottom, or left properties.

2 . Static Position:
    The default position for all elements is static, meaning they flow in the normal document layout. 
    They are not affected by the top, right, bottom, or left properties.

3 . Sticky Position:
    A sticky-position element behaves like a combination of relative and fixed positioning.
    It is positioned relative to its nearest scrolling ancestor and "sticks" to a specific position as the user scrolls.

4 . Relative Position:
    A relatively positioned element is positioned relative to its normal position. 
    It can be moved using the top, right, bottom, and left properties.

5 . Absolute Position:
    An absolutely positioned element is positioned relative to its nearest positioned ancestor. 
    If no ancestor is positioned, it is positioned relative to the initial containing block, which is typically the browser window.


// Q. 2 ===================================================================================================================

<!DOCTYPE html>
<html>
<head>
  <style>
    .error {
      color: red;
    }
  </style>
</head>
<body>
  <h2>Registration Form</h2>
  <form id="registrationForm" onsubmit="validateForm(event)">
    <label for="name">Name:</label>
    <input type="text" id="name" required>
    <span id="nameError" class="error"></span>

    <label for="email">Email:</label>
    <input type="email" id="email" required>
    <span id="emailError" class="error"></span>

    <label for="phone">Phone Number:</label>
    <input type="tel" id="phone" pattern="[0-9]{10}" required>
    <span id="phoneError" class="error"></span>

    <label for="password">Password:</label>
    <input type="password" id="password" required>
    <span id="passwordError" class="error"></span>

    <label for="age">Age:</label>
    <input type="number" id="age" min="18" max="99" required>
    <span id="ageError" class="error"></span>

    <input type="submit" value="Submit">
  </form>

  <script>
    function validateForm(event) {
      event.preventDefault();

      // Reset error messages
      document.querySelectorAll(".error").forEach(error => error.textContent = "");

      // Fetch form values
      const name = document.getElementById("name").value.trim();
      const email = document.getElementById("email").value.trim();
      const phone = document.getElementById("phone").value.trim();
      const password = document.getElementById("password").value.trim();
      const age = document.getElementById("age").value.trim();

      let valid = true;

      // Perform validation
      if (name === "") {
        document.getElementById("nameError").textContent = "Name is required";
        valid = false;
      }

      if (email === "") {
        document.getElementById("emailError").textContent = "Email is required";
        valid = false;
      }

      // ... Perform validation for other fields

      if (valid) {
        // Form is valid, submit the data or perform further actions
        alert("Form submitted successfully!");
      }
    }
  </script>
</body>
</html>



// Q. 3 ===================================================================================================================


Ans 3 . There are three types of execution contexts in JavaScript:
    
          1 . Global Execution Context
          
          2. Function Execution Context
          
          3. Eval Execution Context (Not commonly used)

      The execution context consists of the following components:

       1. Variable Object (VO) or Environment Record:

          It contains variables, function declarations, and function arguments.
          In the global context, the variable object is known as the Global Object (e.g., window in browsers).
          For function execution contexts, the variable object holds the function arguments, parameters, and locally declared variables.

      2. Scope Chain:

          The scope chain is a list of variable objects that represents the hierarchy of scopes.
          It determines the accessibility of variables and functions.
          When a variable is accessed, the JavaScript engine searches the scope chain until it finds the variable or reaches the global scope.

      3. This Value:

          The "this" value refers to the object that is currently executing the code.
          Its value is determined by how a function is called or how an object method is invoked.

            Global Execution Context:-
                        _______________________
                       |                       |
                       |   Variable Object     |
                       |   Scope Chain         |
                       |   This Value          |
                       |                       |
                       |_______________________|
                      
            Function Execution Context:-
                        _______________________
                       |                       |
                       |   Variable Object     |
                       |   Scope Chain         |
                       |   This Value          |
                       |                       |
                       |_______________________|


// Q. 5 ===================================================================================================================


<!DOCTYPE html>
<html>
<head>
  <style>
    .gallery {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      grid-gap: 10px;
    }

    .gallery img {
      width: 100%;
      height: auto;
    }
  </style>
</head>
<body>
  <div class="gallery">
    <img src="image1.jpg" alt="Image 1">
    <img src="image2.jpg" alt="Image 2">
    <img src="image3.jpg" alt="Image 3">
    <img src="image4.jpg" alt="Image 4">
    <img src="image5.jpg" alt="Image 5">
    <img src="image6.jpg" alt="Image 6">
    <img src="image7.jpg" alt="Image 7">
    <img src="image8.jpg" alt="Image 8">
  </div>
</body>
</html>

