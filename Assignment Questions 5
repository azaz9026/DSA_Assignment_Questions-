// Q.1 =============================================================================================================================================

/*
  Synchronous means happening at the same time. Asynchronous is the opposite—not happening at the same time1.
  In the context of education, synchronous learning involves learning together in real time—a direct back-and-forth 
  between teacher and students. Asynchronous learning involves students working outside of a classroom setting and at their own pace1.

  In computer programming, synchronous and asynchronous are terms used to describe two different ways of transmitting data between 
  two or more devices. Synchronous transmission is synchronized by an external clock signal that is shared between the sender and
  receiver. Asynchronous transmission does not use an external clock signal but instead uses start and stop bits to signal the 
  beginning and end of each byte of data3
*/

// Q.2 =============================================================================================================================================

/*
    A Web API (Application Programming Interface) is an interface that allows different software applications to communicate with 
    each other over the internet1. It is a set of protocols and tools for building software applications.

    Web APIs are used to provide access to data and functionality from other applications or services. 
    They are typically used by developers to build web applications that can interact with other web applications2.
    */


// Q.3 =============================================================================================================================================

/*
    A Web API (Application Programming Interface) is an interface that allows different software applications to communicate with 
    each other over the internet. It is a set of protocols and tools for building software applications.

    Web APIs are used to provide access to data and functionality from other applications or services. They are typically 
    used by developers to build web applications that can interact with other web applications
*/

// Q.4 =============================================================================================================================================

/*
    In JavaScript, you can handle asynchronous code using callbacks, promises, and async/await1.

     Callbacks are functions that are passed as arguments to other functions and are executed when the
     other function has completed its task. Promises are objects that represent the eventual completion
     (or failure) of an asynchronous operation and allow you to handle the result of that operation when
     it is available. Async/await is a newer way of handling asynchronous code that allows you to write
     asynchronous code that looks more like synchronous code.
     */



// Q.5 =============================================================================================================================================

/*
   A callback is a function that is passed as an argument to another function and is executed when the other function has completed its task.
   Callbacks are used to handle asynchronous operations in JavaScript1.

  Callback Hell is a situation where you have complex nested callbacks that make the code difficult to read and maintain1.
  It is essentially nested callbacks stacked below one another forming a pyramid structure2. Every callback depends/waits
  for the previous callback, thereby making a pyramid structure that affects the readability and maintainability of the code.
  */


  

// Q.6 =============================================================================================================================================

/*
A Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and allows 
you to handle the result of that operation when it is available1.

Here are some of the most powerful JavaScript Promise methods:

Promise.all: This method returns a new promise object that fulfills when all the promises 
in an iterable object have been fulfilled or when the iterable object is empty.

Promise.allSettled: This method takes an array of asynchronous jobs and returns a promise
 that is fulfilled with an array of objects when all the promises have settled.

Promise.race: This method returns a new promise object that fulfills or rejects as
 soon as one of the promises in an iterable object fulfills or rejects1.
 */


// Q.7 =============================================================================================================================================

/*

The async and await keywords in JavaScript are used for working with asynchronous code in a synchronous-like manner1. 
The async keyword is used to declare a function as asynchronous, which means that it will return a promise1. Inside 
an async function, the await keyword can be used to pause the execution of the function until a promise is resolved1.

*/


// Q.8 =============================================================================================================================================

/*

The purpose of the try and catch block is to try and do something which could fail and raise an exception
. The objective of a try-catch block is to manage possible exceptions on the code within1. By requiring a 
try-catch block, Java is forcing you to deal with the exceptions that can happen in your code and make a 
decision on what to do with them, in order to allow your code to fail gracefully.

*/

// Q.9 =============================================================================================================================================

/*
The Fetch API provides a JavaScript interface for accessing and manipulating parts of the protocol, such as requests and responses1. 
The fetch() method in JavaScript is used to request data from a server2. The request can be of any type of API that returns the data
in JSON or XML2. The fetch() method requires one parameter, the URL to request, and returns a promise2. The fetch() method takes one 
mandatory argument, the path to the resource you want to fetch3. It returns a Promise that resolves to the Response to that request — 
as soon as the server responds with headers — even if the server response is an HTTP error status3.

*/


// Q.10 =============================================================================================================================================

/*
 An asynchronous function is implemented using async, await, and promises. The “async” keyword defines an asynchronous function. 
 Syntax async function FunctionName () {… }1. The “async” function contains “await” that pauses the execution of “async” function.
 “await” is only valid inside the “async” function1. Async/await helps you write synchronous-looking JavaScript code that works 
 asynchronously. An async function returns a promise, if the functions returns a value, the promise is resolved with the value,
 but if the async function throws an error, the promise is rejected with that value2.
  */
